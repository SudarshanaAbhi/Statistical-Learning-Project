# COVID-19 Patient Data Preparation and Machine Learning Analysis
# Author: Abhinand S.
# This script performs data preparation and implements various ML models
# to predict different COVID-19 outcomes (death, inpatient, ICU, critical, ventilation)

# Load required libraries
library(dplyr)
library(tidyverse)
library(caret)
library(glmnet)

# Data Balancing Section
# ---------------------
#create balanced data: death
death_bal_train_fin <- data_death_logmodel
death_bal_train_fin <- death_bal_train_fin %>% arrange(desc(death))
set.seed(305)
rand_death <- sample(nrow(death_bal_train_fin[352:20345,]))
e_death <- death_bal_train_fin[352:20345,]
e_death <- e_death[rand_death,]
death_bal_train_fin[352:20345,] <- e_death
rownames(death_bal_train_fin[352:20345,]) <- rownames(e_death)
death_bal_train_final <- death_bal_train_fin[1:702,]

#create balanced data: inpatient
inpat_bal_train_fin <- data_inpat_logmodel
inpat_bal_train_fin <- inpat_bal_train_fin %>% arrange(desc(Inpatient))
set.seed(4546)
rand_inpat <- sample(nrow(inpat_bal_train_fin[352:20345,]))
A <- inpat_bal_train_fin[352:20345,]
A <- A[rand_inpat,]
inpat_bal_train_fin[352:20345,] <- A
rownames(inpat_bal_train_fin[352:20345,]) <- rownames(A)
inpat_bal_train_final <- inpat_bal_train_fin[1:702,]

#create balanced data: icu
icu_bal_train_fin <- data_icu_logmodel
icu_bal_train_fin <- icu_bal_train_fin %>% arrange(desc(ICU))
set.seed(12323)
rand_icu <- sample(nrow(icu_bal_train_fin[352:20345,]))
B_icu <- icu_bal_train_fin[352:20345,]
B_icu <- B_icu[rand_icu,]
icu_bal_train_fin[352:20345,] <- B_icu
rownames(icu_bal_train_fin[352:20345,]) <- rownames(B_icu)
icu_bal_train_final <- icu_bal_train_fin[1:702,]

#create balanced data: critical
crit_bal_train_fin <- data_crit_logmodel
crit_bal_train_fin <- crit_bal_train_fin %>% arrange(desc(critical))
set.seed(645)
rand_crit <- sample(nrow(crit_bal_train_fin[352:20345,]))
c_crit <- crit_bal_train_fin[352:20345,]
c_crit <- c_crit[rand_crit,]
crit_bal_train_fin[352:20345,] <- c_crit
rownames(crit_bal_train_fin[352:20345,]) <- rownames(c_crit)
crit_bal_train_final <- crit_bal_train_fin[1:702,]

#create balanced data: ventilation
vent_bal_train_fin <- data_vent_logmodel
vent_bal_train_fin <- vent_bal_train_fin %>% arrange(desc(ventilation))
set.seed(4985)
rand_vent <- sample(nrow(vent_bal_train_fin[352:20345,]))
d_vent <- vent_bal_train_fin[352:20345,]
d_vent <- d_vent[rand_vent,]
vent_bal_train_fin[352:20345,] <- d_vent
rownames(vent_bal_train_fin[352:20345,]) <- rownames(d_vent)
vent_bal_train_final <- vent_bal_train_fin[1:702,]

# Logistic Regression Models
# -------------------------
# Simple logistic regression models for each outcome

# Inpatient logistic model
sample_inpat_b <- sample(c(TRUE,FALSE), nrow(inpat_bal_train_fin), replace=TRUE, prob=c(0.8,0.2))
train_inpat_b <- inpat_bal_train_fin[sample_inpat_b,]
test_inpat_b <- inpat_bal_train_fin[!sample_inpat_b,]
inpat_logmodel_b <- glm(Inpatient ~., data=train_inpat_b, family=binomial(link="logit"))
summary(inpat_logmodel_b)
pred_inpat_b <- ifelse(predict(inpat_logmodel_b, test_inpat_b, type="response") > 0.5, "1", "0")
confusionMatrix(as.factor(pred_inpat_b), test_inpat_b$Inpatient)

# ICU logistic model
sample_icu_b <- sample(c(TRUE,FALSE), nrow(icu_bal_train_final), replace=TRUE, prob=c(0.8,0.2))
train_icu_b <- icu_bal_train_final[sample_icu_b,]
test_icu_b <- icu_bal_train_final[!sample_icu_b,]
icu_logmodel_b <- glm(ICU ~., data=train_icu_b, family=binomial(link="logit"))
summary(icu_logmodel_b)
pred_icu_b <- ifelse(predict(icu_logmodel_b, test_icu_b, type="response") > 0.5, "1", "0")
confusionMatrix(as.factor(pred_icu_b), test_icu_b$Inpatient)

# Critical logistic model
sample_crit_b <- sample(c(TRUE,FALSE), nrow(crit_bal_train_final), replace=TRUE, prob=c(0.8,0.2))
train_crit_b <- crit_bal_train_final[sample_crit_b,]
test_crit_b <- crit_bal_train_final[!sample_crit_b,]
crit_logmodel_b <- glm(critical ~., data=train_crit_b, family=binomial(link="logit"))
summary(crit_logmodel_b)
pred_crit_b <- ifelse(predict(crit_logmodel_b, test_crit_b, type="response") > 0.5, "1", "0")
confusionMatrix(as.factor(pred_crit_b), test_crit_b$critical)

# Ventilation logistic model
sample_vent_b <- sample(c(TRUE,FALSE), nrow(vent_bal_train_final), replace=TRUE, prob=c(0.8,0.2))
train_vent_b <- vent_bal_train_final[sample_vent_b,]
test_vent_b <- vent_bal_train_final[!sample_vent_b,]
vent_logmodel_b <- glm(ventilation ~., data=train_vent_b, family=binomial(link="logit"))
summary(vent_logmodel_b)
pred_vent_b <- ifelse(predict(vent_logmodel_b, test_vent_b, type="response") > 0.5, "1", "0")
confusionMatrix(as.factor(pred_vent_b), test_vent_b$ventilation)

# Death logistic model
sample_death_b <- sample(c(TRUE,FALSE), nrow(death_bal_train_final), replace=TRUE, prob=c(0.8,0.2))
train_death_b <- death_bal_train_final[sample_death_b,]
test_death_b <- death_bal_train_final[!sample_death_b,]
death_logmodel_b <- glm(death ~., data=train_death_b, family=binomial(link="logit"))
summary(death_logmodel_b)
pred_death_b <- ifelse(predict(death_logmodel_b, test_death_b, type="response") > 0.5, "1", "0")
confusionMatrix(as.factor(pred_death_b), test_death_b$death)

# Lasso Regression Models
# ----------------------
# Lasso regression with cross-validation for each outcome

# Death lasso model
set.seed(424)
x_l_death_b <- model.matrix(death ~., train_death_b)[,-16]
y_l_death_b <- ifelse(train_death_b$death == "1", 1, 0)
cv_death_b_lasso <- cv.glmnet(x_l_death_b, y_l_death_b, alpha=1, family="binomial")  # alpha = 1 for lasso
cv_death_b_lasso$lambda.min
death_b_lasso <- glmnet(x_l_death_b, y_l_death_b, alpha=1, family="binomial", lambda=cv_death_b_lasso$lambda.min)
coef(death_b_lasso)
x_l_death_b.test <- model.matrix(death ~., test_death_b)[,-16]
prob_death_b_lasso <- death_b_lasso %>% predict(newx = x_l_death_b.test)
pred_death_b_lasso <- ifelse(prob_death_b_lasso > 0.5, "1", "0")
mean(pred_death_b_lasso == test_death_b$death)
confusion.glmnet(death_b_lasso, newx = x_l_death_b.test, newy = test_death_b$death, family = "binomial")

# Inpatient lasso model
set.seed(4624)
x_l_inpat_b <- model.matrix(Inpatient ~., train_inpat_b)[,-16]
y_l_inpat_b <- ifelse(train_inpat_b$Inpatient == "1", 1, 0)
cv_inpat_b_lasso <- cv.glmnet(x_l_inpat_b, y_l_inpat_b, alpha=1, family="binomial")  # alpha = 1 for lasso
cv_inpat_b_lasso$lambda.min
inpat_b_lasso <- glmnet(x_l_inpat_b, y_l_inpat_b, alpha=1, family="binomial", lambda=cv_inpat_b_lasso$lambda.min)
coef(inpat_b_lasso)
x_l_inpat_b.test <- model.matrix(Inpatient ~., test_inpat_b)[,-16]
prob_inpat_b_lasso <- inpat_b_lasso %>% predict(newx = x_l_inpat_b.test)
pred_inpat_b_lasso <- ifelse(prob_inpat_b_lasso > 0.5, "1", "0")
mean(pred_inpat_b_lasso == test_inpat_b$Inpatient)
confusion.glmnet(inpat_b_lasso, newx = x_l_inpat_b.test, newy = test_inpat_b$Inpatient, family = "binomial")

# ICU lasso model
set.seed(983)
x_l_icu_b <- model.matrix(ICU ~., train_icu_b)[,-16]
y_l_icu_b <- ifelse(train_icu_b$ICU == "1", 1, 0)
cv_icu_b_lasso <- cv.glmnet(x_l_icu_b, y_l_icu_b, alpha=1, family="binomial")  # alpha = 1 for lasso
cv_icu_b_lasso$lambda.min
icu_b_lasso <- glmnet(x_l_icu_b, y_l_icu_b, alpha=1, family="binomial", lambda=cv_icu_b_lasso$lambda.min)
coef(icu_b_lasso)
x_l_icu_b.test <- model.matrix(ICU ~., test_icu_b)[,-16]
prob_icu_b_lasso <- icu_b_lasso %>% predict(newx = x_l_icu_b.test)
pred_icu_b_lasso <- ifelse(prob_icu_b_lasso > 0.5, "1", "0")
mean(pred_icu_b_lasso == test_icu_b$ICU)
confusion.glmnet(icu_b_lasso, newx = x_l_icu_b.test, newy = test_icu_b$ICU, family = "binomial")

# Critical lasso model
set.seed(3539)
x_l_crit_b <- model.matrix(critical ~., train_crit_b)[,-16]
y_l_crit_b <- ifelse(train_crit_b$critical == "1", 1, 0)
cv_crit_b_lasso <- cv.glmnet(x_l_crit_b, y_l_crit_b, alpha=1, family="binomial")  # alpha = 1 for lasso
cv_crit_b_lasso$lambda.min
crit_b_lasso <- glmnet(x_l_crit_b, y_l_crit_b, alpha=1, family="binomial", lambda=cv_crit_b_lasso$lambda.min)
coef(crit_b_lasso)
x_l_crit_b.test <- model.matrix(critical ~., test_crit_b)[,-16]
prob_crit_b_lasso <- crit_b_lasso %>% predict(newx = x_l_crit_b.test)
pred_crit_b_lasso <- ifelse(prob_crit_b_lasso > 0.5, "1", "0")
mean(pred_crit_b_lasso == test_crit_b$critical)
confusion.glmnet(crit_b_lasso, newx = x_l_crit_b.test, newy = test_crit_b$critical, family = "binomial")

# Ventilation lasso model
set.seed(5524)
x_l_vent_b <- model.matrix(ventilation ~., train_vent_b)[,-16]
y_l_vent_b <- ifelse(train_vent_b$ventilation == "1", 1, 0)
cv_vent_b_lasso <- cv.glmnet(x_l_vent_b, y_l_vent_b, alpha=1, family="binomial")  # alpha = 1 for lasso
cv_vent_b_lasso$lambda.min
vent_b_lasso <- glmnet(x_l_vent_b, y_l_vent_b, alpha=1, family="binomial", lambda=cv_vent_b_lasso$lambda.min)
coef(vent_b_lasso)
x_l_vent_b.test <- model.matrix(ventilation ~., test_vent_b)[,-16]
prob_vent_b_lasso <- vent_b_lasso %>% predict(newx = x_l_vent_b.test)
pred_vent_b_lasso <- ifelse(prob_vent_b_lasso > 0.5, "1", "0")
mean(pred_vent_b_lasso == test_vent_b$ventilation)
confusion.glmnet(vent_b_lasso, newx = x_l_vent_b.test, newy = test_vent_b$ventilation, family = "binomial")

# Ridge Regression Models
# ----------------------
# Ridge regression with cross-validation for each outcome

# Death ridge model
set.seed(61278)
x_r_death_b <- model.matrix(death ~., train_death_b)[,-16]
y_r_death_b <- ifelse(train_death_b$death == "1", 1, 0)
cv_death_b_ridge <- cv.glmnet(x_r_death_b, y_r_death_b, alpha=0, family="binomial")  # alpha = 0 for ridge
cv_death_b_ridge$lambda.min
death_b_ridge <- glmnet(x_r_death_b, y_r_death_b, alpha=0, family="binomial", lambda=cv_death_b_ridge$lambda.min)
coef(death_b_ridge)
x_r_death_b.test <- model.matrix(death ~., test_death_b)[,-16]
prob_death_b_ridge <- death_b_ridge %>% predict(newx = x_r_death_b.test)
pred_death_b_ridge <- ifelse(prob_death_b_ridge > 0.5, "1", "0")
mean(pred_death_b_ridge == test_death_b$death)
confusion.glmnet(death_b_ridge, newx = x_r_death_b.test, newy = test_death_b$death, family = "binomial")

# Inpatient ridge model
set.seed(6125)
x_r_inpat_b <- model.matrix(Inpatient ~., train_inpat_b)[,-16]
y_r_inpat_b <- ifelse(train_inpat_b$Inpatient == "1", 1, 0)
cv_inpat_b_ridge <- cv.glmnet(x_r_inpat_b, y_r_inpat_b, alpha=0, family="binomial")  # alpha = 0 for ridge
cv_inpat_b_ridge$lambda.min
inpat_b_ridge <- glmnet(x_r_inpat_b, y_r_inpat_b, alpha=0, family="binomial", lambda=cv_inpat_b_ridge$lambda.min)
coef(inpat_b_ridge)
x_r_inpat_b.test <- model.matrix(Inpatient ~., test_inpat_b)[,-16]
prob_inpat_b_ridge <- inpat_b_ridge %>% predict(newx = x_r_inpat_b.test)
pred_inpat_b_ridge <- ifelse(prob_inpat_b_ridge > 0.5, "1", "0")
mean(pred_inpat_b_ridge == test_inpat_b$Inpatient)
confusion.glmnet(inpat_b_ridge, newx = x_r_inpat_b.test, newy = test_inpat_b$Inpatient, family = "binomial")

# ICU ridge model
set.seed(9785)
x_r_icu_b <- model.matrix(ICU ~., train_icu_b)[,-16]
y_r_icu_b <- ifelse(train_icu_b$ICU == "1", 1, 0)
cv_icu_b_ridge <- cv.glmnet(x_r_icu_b, y_r_icu_b, alpha=0, family="binomial")  # alpha = 0 for ridge
cv_icu_b_ridge$lambda.min
icu_b_ridge <- glmnet(x_r_icu_b, y_r_icu_b, alpha=0, family="binomial", lambda=cv_icu_b_ridge$lambda.min)
coef(icu_b_ridge)
x_r_icu_b.test <- model.matrix(ICU ~., test_icu_b)[,-16]
prob_icu_b_ridge <- icu_b_ridge %>% predict(newx = x_r_icu_b.test)
pred_icu_b_ridge <- ifelse(prob_icu_b_ridge > 0.5, "1", "0")
mean(pred_icu_b_ridge == test_icu_b$ICU)
confusion.glmnet(icu_b_ridge, newx = x_r_icu_b.test, newy = test_icu_b$ICU, family = "binomial")




